#### Preamble ####
# Purpose: Explore the analysis data and find representitive values
# Author: Haowei Fan, Fangning Zhang, Shaotong Li
# Date: 13 October 2024
# Contact: haowei.fan@mail.utoronto.ca
# License: MIT
# Pre-requisites: 02-analysis_data saved and loaded
# Any other information needed? None

```{r, echo=FALSE, message=FALSE, warning=FALSE}
#### Workspace setup ####
library(tidyverse)
library(rstanarm)
library(patchwork)
#### Read data ####
raw_data <- read_csv(here::here("data/01-raw_data/raw_data.csv"))
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Check for missing values in each column
missing_values <- sapply(raw_data, function(x) sum(is.na(x)))
print(missing_values)
```
```{r, echo=FALSE, message=FALSE, warning=FALSE}
### Remove columns with more than 50% missing values ###

# Find columns with missing value percentage greater than 50%
total_rows <- nrow(raw_data)
columns_to_keep <- sapply(raw_data, function(x) sum(is.na(x)) <= total_rows / 2)

# Filter raw_data to keep only the columns with less than or equal to 50% missing values
raw_data <- raw_data[, columns_to_keep]

# View the columns kept
print(sapply(raw_data, function(x) sum(is.na(x))))
```
```{r, echo=FALSE, message=FALSE, warning=FALSE}
### Remove columns with all identical values ###
# Find columns where all values are identical
columns_to_keep <- sapply(raw_data, function(x) length(unique(x)) > 1)

# Filter raw_data to remove columns with all identical values
raw_data <- raw_data[, columns_to_keep]

# View the columns kept
print(sapply(raw_data, function(x) sum(is.na(x))))
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Get unique pollster IDs
unique_pollster_ids <- unique(raw_data$pollster_id)
print(unique_pollster_ids)
```
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Get unique question IDs
unique_question_ids <- unique(raw_data$question_id)
print(unique_question_ids)
```
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Get unique methodologys
unique_methodologys <- unique(raw_data$methodology)
print(unique_methodologys)
```
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Get unique population
unique_population <- unique(raw_data$population)
print(unique_population)
```
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Get unique race_id
unique_race_id <- unique(raw_data$race_id)
print(unique_race_id)
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Get unique ranked_choice_reallocated
unique_ranked_choice_reallocated <- unique(raw_data$ranked_choice_reallocated)
print(unique_ranked_choice_reallocated)
```
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Get unique hypothetical
unique_hypothetical <- unique(raw_data$hypothetical)
print(unique_hypothetical)
```
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Get unique party
unique_party <- unique(raw_data$party)
print(unique_party)
```
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Get the maximum and minimum values of numeric_grade
max_numeric_grade <- max(raw_data$numeric_grade, na.rm = TRUE)
min_numeric_grade <- min(raw_data$numeric_grade, na.rm = TRUE)
print(paste("Maximum numeric grade:", max_numeric_grade))
print(paste("Minimum numeric grade:", min_numeric_grade))
```
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Find the earliest start date and the latest end date
earliest_start_date <- min(raw_data$start_date, na.rm = TRUE)
latest_end_date <- max(raw_data$end_date, na.rm = TRUE)
print(paste("Earliest start date:", earliest_start_date))
print(paste("Latest end date:", latest_end_date))
```
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Calculate the ratio of FALSE to TRUE in the hypothetical column
hypothetical_ratio <- table(raw_data$hypothetical)
print(hypothetical_ratio)
false_to_true_ratio <- hypothetical_ratio["FALSE"] / hypothetical_ratio["TRUE"]
print(paste("False to True Ratio:", false_to_true_ratio))
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Find the range of pollscore in the original dataset
pollscore_range <- range(raw_data$pollscore, na.rm = TRUE)
print(paste("Pollscore range:", pollscore_range[1], "to", pollscore_range[2]))
```
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Plot histogram of numeric_grade
ggplot(raw_data, aes(x = numeric_grade)) +
  geom_histogram(binwidth = 0.5, fill = "blue", color = "black") +
  theme_minimal() +
  labs(title = "Histogram of Numeric Grade", x = "Numeric Grade", y = "Count")
```
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Plot histogram of pollscore
ggplot(raw_data, aes(x = pollscore)) +
  geom_histogram(binwidth = 0.5, fill = "blue", color = "black") +
  theme_minimal() +
  labs(title = "Histogram of pollscore", x = "pollscore", y = "Count")
```
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Plot histogram of transparency_score
ggplot(raw_data, aes(x = transparency_score)) +
  geom_histogram(binwidth = 0.5, fill = "blue", color = "black") +
  theme_minimal() +
  labs(title = "Histogram of transparency_score", x = "transparency_score", y = "Count")
```
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Plot histogram of sample_size
ggplot(raw_data, aes(x = sample_size)) +
  geom_histogram(binwidth = 0.5, fill = "blue", color = "black") +
  theme_minimal() +
  labs(title = "Histogram of sample_size", x = "sample_size", y = "Count")
```
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Find the top 3 candidates.
candidate_ranking <- raw_data %>%
  group_by(candidate_name) %>%
  summarize(
    poll_count = n(),                    
    avg_weighted_pct = mean(poll_count * pct, na.rm = TRUE)  
  ) %>%
  arrange(desc(avg_weighted_pct)) %>%    
  slice_head(n = 3)                       
print(candidate_ranking)
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Load data for each candidate
donald_trump_data <- read_parquet(here::here("data/02-analysis_data/Donald Trump_cleaned_data.parquet"))
joe_biden_data <- read_parquet(here::here("data/02-analysis_data/Joe Biden_cleaned_data.parquet")) 
kamala_harris_data <- read_parquet(here::here("data/02-analysis_data/Kamala Harris_cleaned_data.parquet")) 

# Define and load data for each candidate
candidate_data <- list(
  "Donald Trump" = donald_trump_data %>% select(-poll_id, -pct),
  "Kamala Harris" = joe_biden_data %>% select(-poll_id, -pct),
  "Joe Biden" = kamala_harris_data %>% select(-poll_id, -pct)
)

# Function to create distribution plots for each variable in a dataset
plot_distributions <- function(data, candidate_name) {
  plots <- list()
  
  for (var in names(data)) {
    if (is.numeric(data[[var]])) {
      # Histogram for numeric variables
      plot <- ggplot(data, aes(x = .data[[var]])) +
        geom_histogram(bins = 30, color = "black", fill = "skyblue") +
        labs(title = paste("Distribution of", var, "for", candidate_name), x = var, y = "Frequency") +
        theme_minimal()
      
    } else if (is.character(data[[var]]) || is.factor(data[[var]])) {
      # Bar plot for categorical variables
      plot <- ggplot(data, aes(x = .data[[var]])) +
        geom_bar(color = "black", fill = "skyblue") +
        labs(title = paste("Distribution of", var, "for", candidate_name), x = var, y = "Count") +
        theme_minimal()
      
    } else if (is.logical(data[[var]])) {
      # Bar plot for logical variables (TRUE/FALSE)
      plot <- ggplot(data, aes(x = factor(.data[[var]], levels = c(TRUE, FALSE)))) +
        geom_bar(color = "black", fill = "skyblue") +
        labs(title = paste("Distribution of", var, "for", candidate_name), x = var, y = "Count") +
        theme_minimal()
    }
    
    # Add plot to list
    plots[[var]] <- plot
  }
  
  # Combine all individual plots into one using patchwork
  combined_plot <- wrap_plots(plots) +
    plot_annotation(title = paste("Distributions of Variables for", candidate_name))
  
  return(combined_plot)
}

# Create and display combined plots for each candidate
for (candidate_name in names(candidate_data)) {
  data <- candidate_data[[candidate_name]]
  combined_plot <- plot_distributions(data, candidate_name)
  print(combined_plot)
}


```
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Define paths for each candidate's data
candidate_files <- list(
  "Donald Trump" = "data/02-analysis_data/Donald Trump_cleaned_data.parquet",
  "Kamala Harris" = "data/02-analysis_data/Kamala Harris_cleaned_data.parquet",
  "Joe Biden" = "data/02-analysis_data/Joe Biden_cleaned_data.parquet"
)

# Function to calculate representative values
calculate_representative_value <- function(data) {
  data %>%
    summarise(
      pollscore_mean = mean(pollscore, na.rm = TRUE),
      numeric_grade_median = median(numeric_grade, na.rm = TRUE),
      transparency_score_mean = mean(transparency_score, na.rm = TRUE),
      duration_mean = mean(duration, na.rm = TRUE),
      sample_size_mean = mean(sample_size, na.rm = TRUE),
      population_mode = as.character(names(sort(table(population), decreasing = TRUE)[1])),  # Calculate mode
      hypothetical_mode = as.logical(names(sort(table(hypothetical), decreasing = TRUE)[1])),  # Calculate mode
      Methodology_mode = as.character(names(sort(table(Methodology), decreasing = TRUE)[1])),  # Calculate mode
      pct_mean = mean(pct, na.rm = TRUE)
    )
}

# Calculate and display representative values for each candidate
all_representative_values <- list()
for (candidate_name in names(candidate_files)) {
  data <- read_parquet(here::here(candidate_files[[candidate_name]]))
  representative_values <- calculate_representative_value(data)
  all_representative_values[[candidate_name]] <- representative_values
}

# Combine and display full results as a single data frame
full_representative_values <- bind_rows(all_representative_values, .id = "Candidate")
print(full_representative_values, width = Inf)
```



