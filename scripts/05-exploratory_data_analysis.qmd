#### Preamble ####
# Purpose: Explore the analysis data and find representitive values
# Author: Haowei Fan, Fangning Zhang, Shaotong Li
# Date: 13 October 2024
# Contact: haowei.fan@mail.utoronto.ca
# License: MIT
# Pre-requisites: 02-analysis_data saved and loaded
# Any other information needed? None

```{r, echo=FALSE, message=FALSE, warning=FALSE}
#### Workspace setup ####
library(tidyverse)
library(rstanarm)
library(patchwork)
library(moments)
raw_data <- read_csv(here::here("data/01-raw_data/raw_data.csv"))
Trump_test <- read_csv(here::here("data/02-analysis_data/02-Testing/test_Trump.parquet"))
Harris_test <- read_csv(here::here("data/02-analysis_data/02-Testing/test_Harris.parquet"))
```
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Get unique pollster IDs
unique_pollster_ids <- unique(raw_data$pollster_id)
print(unique_pollster_ids)
```
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Get unique question IDs
unique_question_ids <- unique(raw_data$question_id)
print(unique_question_ids)
```
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Get unique methodologys
unique_methodologys <- unique(raw_data$methodology)
print(unique_methodologys)
```
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Get unique population
unique_population <- unique(raw_data$population)
print(unique_population)
```
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Get unique race_id
unique_race_id <- unique(raw_data$race_id)
print(unique_race_id)
```
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Get unique ranked_choice_reallocated
unique_ranked_choice_reallocated <- unique(raw_data$ranked_choice_reallocated)
print(unique_ranked_choice_reallocated)
```
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Get unique hypothetical
unique_hypothetical <- unique(raw_data$hypothetical)
print(unique_hypothetical)
```
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Get unique party
unique_party <- unique(raw_data$party)
print(unique_party)
```
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Get the maximum and minimum values of numeric_grade
max_numeric_grade <- max(raw_data$numeric_grade, na.rm = TRUE)
min_numeric_grade <- min(raw_data$numeric_grade, na.rm = TRUE)
print(paste("Maximum numeric grade:", max_numeric_grade))
print(paste("Minimum numeric grade:", min_numeric_grade))
```
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Find the earliest start date and the latest end date
earliest_start_date <- min(raw_data$start_date, na.rm = TRUE)
latest_end_date <- max(raw_data$end_date, na.rm = TRUE)
print(paste("Earliest start date:", earliest_start_date))
print(paste("Latest end date:", latest_end_date))
```
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Calculate the ratio of FALSE to TRUE in the hypothetical column
hypothetical_ratio <- table(raw_data$hypothetical)
print(hypothetical_ratio)
false_to_true_ratio <- hypothetical_ratio["FALSE"] / hypothetical_ratio["TRUE"]
print(paste("False to True Ratio:", false_to_true_ratio))
```
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Find the range of pollscore in the original dataset
pollscore_range <- range(raw_data$pollscore, na.rm = TRUE)
print(paste("Pollscore range:", pollscore_range[1], "to", pollscore_range[2]))
```
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Plot histogram of numeric_grade
ggplot(raw_data, aes(x = numeric_grade)) +
  geom_histogram(binwidth = 0.5, fill = "blue", color = "black") +
  theme_minimal() +
  labs(title = "Histogram of Numeric Grade", x = "Numeric Grade", y = "Count")
```
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Plot histogram of pollscore
ggplot(raw_data, aes(x = pollscore)) +
  geom_histogram(binwidth = 0.5, fill = "blue", color = "black") +
  theme_minimal() +
  labs(title = "Histogram of pollscore", x = "pollscore", y = "Count")
```
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Plot histogram of transparency_score
ggplot(raw_data, aes(x = transparency_score)) +
  geom_histogram(binwidth = 0.5, fill = "blue", color = "black") +
  theme_minimal() +
  labs(title = "Histogram of transparency_score", x = "transparency_score", y = "Count")
```
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Plot histogram of sample_size
ggplot(raw_data, aes(x = sample_size)) +
  geom_histogram(binwidth = 0.5, fill = "blue", color = "black") +
  theme_minimal() +
  labs(title = "Histogram of sample_size", x = "sample_size", y = "Count")
```
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Find the top 3 candidates.
candidate_ranking <- raw_data %>%
  group_by(candidate_name) %>%
  summarize(
    poll_count = n(),                    
    avg_weighted_pct = mean(poll_count * pct, na.rm = TRUE)  
  ) %>%
  arrange(desc(avg_weighted_pct)) %>%    
  slice_head(n = 5)                       
print(candidate_ranking)
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
#select significant values based on variable type of each candidate

# Define the function to select feature values based on variable type
select_feature_value <- function(data, candidate_name) {
  feature_values <- list()
  
  for (col_name in names(data)) {
    col_data <- data[[col_name]]
    
    # Numeric variables: Choose mean or median based on skewness
    if (is.numeric(col_data)) {
      # Check if there are enough valid values to compute skewness
      if (sum(!is.na(col_data)) > 1) {  # Ensure there is more than one valid value
        skew_val <- skewness(col_data, na.rm = TRUE)
        if (!is.na(skew_val) && skew_val < 1) {
          feature_values[[col_name]] <- mean(col_data, na.rm = TRUE)
        } else {
          feature_values[[col_name]] <- median(col_data, na.rm = TRUE)
        }
      } else {
        # Default to median if skewness cannot be computed
        feature_values[[col_name]] <- median(col_data, na.rm = TRUE)
      }
    }
    
    # Categorical variables: Choose mode (most frequent value)
    else if (is.character(col_data)) {
      feature_values[[col_name]] <- Mode(col_data)
    }
    
    # Boolean variables: Choose TRUE or FALSE based on which one appears more frequently
    else if (is.logical(col_data)) {
      true_count <- sum(col_data, na.rm = TRUE)
      false_count <- sum(!col_data, na.rm = TRUE)
      feature_values[[col_name]] <- if (true_count >= false_count) TRUE else FALSE
    }
  }
  
  # Add the candidate name to the results
  feature_values[["Candidate"]] <- candidate_name
  return(feature_values)
}

# Define a function to calculate the mode (most frequent value)
Mode <- function(x) {
  ux <- unique(x)
  ux[which.max(tabulate(match(x, ux)))]
}

# Calculate feature values for each candidate
trump_features <- select_feature_value(trump_test, "Donald Trump")
harris_features <- select_feature_value(harris_test, "Kamala Harris")

# Combine results into a single data frame for easy viewing
all_candidate_features <- bind_rows(trump_features, harris_features)

# Display the final table of feature values
print(all_candidate_features)

```
